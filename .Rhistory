devtools::install_github("revbayes/RevKnitr")
devtools::install_github("revbayes/RevKnitr", force =T)
knitr::opts_chunk$set(root.dir = "D:/RevBayes/")
knitr::opts_chunk$set(engine.path ="D:/RevBayes/revbayes/rb")
knitr::opts_chunk$set(root.dir = "D:/RevBayes")
knitr::opts_chunk$set(engine.path ="D:/RevBayes/revbayes/rb")
knitr::opts_chunk$set(root.dir = "D:/RevBayes")
knitr::opts_chunk$set(engine.path ="D:/RevBayes/revbayes/rb")
knitr::opts_chunk$set(root.dir = "D:/RevBayes")
knitr::opts_chunk$set(engine.path ="D:/RevBayes/revbayes/rb")
devtools::install_github("revbayes/RevKnitr", force =T)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
devtools::install_github("revbayes/RevKnitr")
devtools::install_github("revbayes/RevKnitr", force =T)
unlink('D:/RevBayes/RevBayes_cache', recursive = TRUE)
knitr::opts_chunk$set(root.dir = "D:/RevBayes")
knitr::opts_chunk$set(engine.path ="D:/RevBayes/revbayes/rb")
Semillas <- read.csv("C:/Users/ghuer/Downloads/Semillas.csv", row.names=1)
View(Semillas)
load (dplyr)
install.packages(dplyr)
install.packages('dplyr')
load (dplyr)
load ('dplyr')
library(dplyr)
f2 <- Semillas %>% group_by(FRUTO,ABORTO) %>% tally()
View(f2)
count(Semillas$FRUTO, "SI" )
count(Semillas$ABORTO, "SI" )
count(Semillas, "SI" )
Load(Semillas)
count(ABORTO, "SI" )
df%>%count(FRUTO, ABORTO)
aggregate(x ~ FRUTO + ABORTO,                                            # Count rows of all groups
data = Semillas,
FUN = length)
Semillas%>%count(FRUTO, ABORTO)
Semillas%>%count(ABORTO, FRUTO)
Semillas%>%count(FRUTO, ABORTO)
semillas_abortos <- read.csv("C:/Users/ghuer/Downloads/semillas_abortos.csv", row.names=1)
View(semillas_abortos)
semillas_abortos%>%count(FRUTO, ABORTO)
count <- semillas_abortos%>%count(FRUTO, ABORTO)
View(count)
count <- transform(semillas_abortos, abortos=FRUTO, ABORTO, FUN=length))
count <- transform(semillas_abortos, abortos=FRUTO, ABORTO, FUN=length)
count <- transform(semillas_abortos, abortos=(FRUTO, ABORTO, FUN=length))
count <- transform(semillas_abortos, abortos=ave(FRUTO, ABORTO, FUN=length))
View(count)
count <- semillas_abortos%>%count(FRUTO, ABORTO)
reshape(count, timevar="ABORTO", idvar="FRUTO"", direction="wide")
reshape(count, timevar="ABORTO", idvar="FRUTO, direction="wide")
reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
colnames
colnames(count)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
count <- semillas_abortos%>%count(FRUTO, ABORTO)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
count
colnames(count)
View(semillas_abortos)
count <- semillas_abortos%>%count(FRUTO, ABORTO, LOCULO)
View(count)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
count <- semillas_abortos%>%count(FRUTO, ABORTO)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
colnames(count) <- c("FRUTO", "ABORTOS", "SEMILLAS", "NAS")
View(count)
count$OVULOS <- count$ABORTOS + count$SEMILLAS
View(count)
View(count)
count <- semillas_abortos%>%count(FRUTO, ABORTO)
View(count)
View(count)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
count
colnames(count)
count <- semillas_abortos%>%count(FRUTO, ABORTO)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
colnames(count) <- c("FRUTO", "NO_ABORTOS", "ABORTOS", "NAS")
count$OVULOS <- count$NO_ABORTOS + count$ABORTOS + count$"NAS"
View(count)
count$OVULOS <- (count$NO_ABORTOS + count$ABORTOS + count$"NAS", na.rm=TRUE)
count <- semillas_abortos%>%count(FRUTO, ABORTO)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
colnames(count) <- c("FRUTO", "NO_ABORTOS", "ABORTOS", "NAS")
count$OVULOS <- rowSums(count[,c("NO_ABORTOS", "ABORTOS", "NAS")], na.rm=TRUE)
View(count)
plot(count$OVULOS, count$ABORTOS)
plot(count$OVULOS, count$ABORTOS, pch = 16, cex = 1.3, col = "black",
main = "OVULOS CONTRA ABORTOS",
xlab = "Número de Óvulos", ylab = "Número de abortos")
lm(count$ABORTOS ~ count$OVULOS)
abline(lm(count$ABORTOS ~ count$OVULOS))
library(ggplot2)
ggplot(count, aes(x = OVULOS, y = ABORTOS)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
# Filled Density Plot
d <- density(count$OVULOS)
plot(d, main="Kernel Density of Miles Per Gallon")
polygon(d, col="red", border="blue")
# plot densities
sm.density.compare(count$OVULOS, count$ABORTOS, xlab="Miles Per Gallon")
library(sm)
install.packages('sm')
library(sm)
# plot densities
sm.density.compare(count$OVULOS, count$ABORTOS, xlab="Miles Per Gallon")
title(main="MPG Distribution by Car Cylinders")
# Filled Density Plot
d <- density(count$OVULOS)
plot(d, main="Número de Ovulos")
polygon(d, col="red", border="blue")
e <- density(count$ABORTOS)
plot(d, main="Número de Ovulos")
polygon(d, col="red", border="blue")
polygon(e, col="red", border="blue")
install.packages('sm')
# Filled Density Plot
d <- density(count$OVULOS)
e <- density(count$ABORTOS)
plot(d, main="Número de Ovulos")
polygon(d, col="red", border="blue")
polygon(e, col="red", border="blue")
e <- density(count$ABORTOS)
e <- density(count$ABORTOS, na.rm = T )
plot(d, main="Número de Ovulos")
polygon(d, col="red", border="blue")
polygon(e, col="red", border="blue")
plot(e, main="Número de Ovulos")
polygon(d, col="red", border="blue")
polygon(e, col="red", border="blue")
# Filled Density Plot
d <- density(count$OVULOS)
e <- density(count$ABORTOS, na.rm = T )
plot(e, main="Número de Ovulos")
polygon(d, col="red", border="blue")
polygon(e, col="green", border="blue")
# Filled Density Plot
d <- density(count$OVULOS)
plot(d, main="Número de Ovulos")
polygon(d, col="red", border="blue")
x <- count$OVULOS
h<-hist(x, breaks=10, col="red", xlab="Número de Ovulos",
main="Grafiquito")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
x <- count$ABORTOS
h<-hist(x, breaks=10, col="green", xlab="Número de abortos",
main="Grafiquito")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
lm(count$ABORTOS ~ count$OVULOS)
count.lm <-lm(count$ABORTOS ~ count$OVULOS)
summary(count.lm)
x <- count$OVULOS
h<-hist(x, breaks=10, col="red", xlab="Número de Ovulos",
main="Grafiquito")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
boxplot(count$OVULOS)
boxplot(count$ABORTOS)
boxplot(count$OVULOS,count$ABORTOS)
boxplot(count$ABORTOS)
count$OVULOS,
boxplot(count$OVULOS,count$ABORTOS)
setwd("C:/Users/ghuer/Google Drive/Proyectos/Inat_Images")
# start with a new environment
rm(list = ls())
# install.packages('rinat')
library(rinat)
# read csv file with species names
obs <- read.csv("./species.csv", header=T)
# Select genus and species columns to creat  species query
obs <- as.data.frame(paste(obs$Genus, obs$Species))
## optional functions if your database has any of the following:
# delete empty rows
obs <- obs[!(obs==" "), ]
# delete subspecies since they are not accepted as query
obs <- sub("^(\\S*\\s+\\S+).*", "\\1", obs)
# delete duplicated accessions
obs <- unique(obs)
# create empty data frame to populate with inat information
inat_data <- data.frame(matrix(ncol = 36, nrow = 0))
dir.create("./images")
setwd("./images")
for (i in obs) {
#trycatch function enables to continue the script even if a query doesn't have any hits
tryCatch({
#change "maxresults" argument to set the number of images to download
inat_out <- get_inat_obs(taxon_name = i, maxresults = 50)
inat_data  <- rbind(inat_data, inat_out)
#delay queries 2.5 seconds to avoid server overload error
Sys.sleep(2.5)
}, error=function(e){print(paste0("WARNING:couldn't find a match for ", i))})
}
species  <- unique(inat_data$scientific_name)
final_inat_data <- data.frame(matrix(ncol = 36, nrow = 0))
for (i in species){
newdata <- subset(inat_data, scientific_name == i)
#this step selects only "research" and open licenses if a species has more than 10 records
if (nrow(newdata) > 10){
newdata <- subset(newdata, quality_grade == "research" )
newdata <- subset(newdata, license != "CC")
final_inat_data  <- rbind(final_inat_data, newdata)
} else{
final_inat_data  <- rbind(final_inat_data, newdata)
}
infolder <- paste0(sub(" ", "_", i))
dir.create(infolder)
setwd(infolder)
for (b in seq(nrow(newdata))){
tryCatch({
user<-newdata[b,11]
cc<-newdata[b,33]
#for some reason "cc" images are no tagged, this next step includes "CC" on file names
if (cc==""){
cc<-"CC"
}
url<-newdata[b,10]
id<-newdata[b,12]
file_name<- paste0(infolder,"_",user,"_",cc,"_",id,".jpeg")
download.file(url, file_name, method = "curl")
}, error=function(e){print(paste0("WARNING:couldn't find the url"))})
}
setwd("../")
}
setwd("../")
#generate file with inaturalist observations information
write.csv(final_inat_data, "./inat_data.csv", row.names = F)
View(inat_out)
