devtools::install_github("revbayes/RevKnitr")
devtools::install_github("revbayes/RevKnitr", force =T)
knitr::opts_chunk$set(root.dir = "D:/RevBayes/")
knitr::opts_chunk$set(engine.path ="D:/RevBayes/revbayes/rb")
knitr::opts_chunk$set(root.dir = "D:/RevBayes")
knitr::opts_chunk$set(engine.path ="D:/RevBayes/revbayes/rb")
knitr::opts_chunk$set(root.dir = "D:/RevBayes")
knitr::opts_chunk$set(engine.path ="D:/RevBayes/revbayes/rb")
knitr::opts_chunk$set(root.dir = "D:/RevBayes")
knitr::opts_chunk$set(engine.path ="D:/RevBayes/revbayes/rb")
devtools::install_github("revbayes/RevKnitr", force =T)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
devtools::install_github("revbayes/RevKnitr")
devtools::install_github("revbayes/RevKnitr", force =T)
unlink('D:/RevBayes/RevBayes_cache', recursive = TRUE)
knitr::opts_chunk$set(root.dir = "D:/RevBayes")
knitr::opts_chunk$set(engine.path ="D:/RevBayes/revbayes/rb")
Semillas <- read.csv("C:/Users/ghuer/Downloads/Semillas.csv", row.names=1)
View(Semillas)
load (dplyr)
install.packages(dplyr)
install.packages('dplyr')
load (dplyr)
load ('dplyr')
library(dplyr)
f2 <- Semillas %>% group_by(FRUTO,ABORTO) %>% tally()
View(f2)
count(Semillas$FRUTO, "SI" )
count(Semillas$ABORTO, "SI" )
count(Semillas, "SI" )
Load(Semillas)
count(ABORTO, "SI" )
df%>%count(FRUTO, ABORTO)
aggregate(x ~ FRUTO + ABORTO,                                            # Count rows of all groups
data = Semillas,
FUN = length)
Semillas%>%count(FRUTO, ABORTO)
Semillas%>%count(ABORTO, FRUTO)
Semillas%>%count(FRUTO, ABORTO)
semillas_abortos <- read.csv("C:/Users/ghuer/Downloads/semillas_abortos.csv", row.names=1)
View(semillas_abortos)
semillas_abortos%>%count(FRUTO, ABORTO)
count <- semillas_abortos%>%count(FRUTO, ABORTO)
View(count)
count <- transform(semillas_abortos, abortos=FRUTO, ABORTO, FUN=length))
count <- transform(semillas_abortos, abortos=FRUTO, ABORTO, FUN=length)
count <- transform(semillas_abortos, abortos=(FRUTO, ABORTO, FUN=length))
count <- transform(semillas_abortos, abortos=ave(FRUTO, ABORTO, FUN=length))
View(count)
count <- semillas_abortos%>%count(FRUTO, ABORTO)
reshape(count, timevar="ABORTO", idvar="FRUTO"", direction="wide")
reshape(count, timevar="ABORTO", idvar="FRUTO, direction="wide")
reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
colnames
colnames(count)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
count <- semillas_abortos%>%count(FRUTO, ABORTO)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
count
colnames(count)
View(semillas_abortos)
count <- semillas_abortos%>%count(FRUTO, ABORTO, LOCULO)
View(count)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
count <- semillas_abortos%>%count(FRUTO, ABORTO)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
colnames(count) <- c("FRUTO", "ABORTOS", "SEMILLAS", "NAS")
View(count)
count$OVULOS <- count$ABORTOS + count$SEMILLAS
View(count)
View(count)
count <- semillas_abortos%>%count(FRUTO, ABORTO)
View(count)
View(count)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
count
colnames(count)
count <- semillas_abortos%>%count(FRUTO, ABORTO)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
colnames(count) <- c("FRUTO", "NO_ABORTOS", "ABORTOS", "NAS")
count$OVULOS <- count$NO_ABORTOS + count$ABORTOS + count$"NAS"
View(count)
count$OVULOS <- (count$NO_ABORTOS + count$ABORTOS + count$"NAS", na.rm=TRUE)
count <- semillas_abortos%>%count(FRUTO, ABORTO)
count <- reshape(count, timevar="ABORTO", idvar="FRUTO", direction="wide")
colnames(count) <- c("FRUTO", "NO_ABORTOS", "ABORTOS", "NAS")
count$OVULOS <- rowSums(count[,c("NO_ABORTOS", "ABORTOS", "NAS")], na.rm=TRUE)
View(count)
plot(count$OVULOS, count$ABORTOS)
plot(count$OVULOS, count$ABORTOS, pch = 16, cex = 1.3, col = "black",
main = "OVULOS CONTRA ABORTOS",
xlab = "Número de Óvulos", ylab = "Número de abortos")
lm(count$ABORTOS ~ count$OVULOS)
abline(lm(count$ABORTOS ~ count$OVULOS))
library(ggplot2)
ggplot(count, aes(x = OVULOS, y = ABORTOS)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
# Filled Density Plot
d <- density(count$OVULOS)
plot(d, main="Kernel Density of Miles Per Gallon")
polygon(d, col="red", border="blue")
# plot densities
sm.density.compare(count$OVULOS, count$ABORTOS, xlab="Miles Per Gallon")
library(sm)
install.packages('sm')
library(sm)
# plot densities
sm.density.compare(count$OVULOS, count$ABORTOS, xlab="Miles Per Gallon")
title(main="MPG Distribution by Car Cylinders")
# Filled Density Plot
d <- density(count$OVULOS)
plot(d, main="Número de Ovulos")
polygon(d, col="red", border="blue")
e <- density(count$ABORTOS)
plot(d, main="Número de Ovulos")
polygon(d, col="red", border="blue")
polygon(e, col="red", border="blue")
install.packages('sm')
# Filled Density Plot
d <- density(count$OVULOS)
e <- density(count$ABORTOS)
plot(d, main="Número de Ovulos")
polygon(d, col="red", border="blue")
polygon(e, col="red", border="blue")
e <- density(count$ABORTOS)
e <- density(count$ABORTOS, na.rm = T )
plot(d, main="Número de Ovulos")
polygon(d, col="red", border="blue")
polygon(e, col="red", border="blue")
plot(e, main="Número de Ovulos")
polygon(d, col="red", border="blue")
polygon(e, col="red", border="blue")
# Filled Density Plot
d <- density(count$OVULOS)
e <- density(count$ABORTOS, na.rm = T )
plot(e, main="Número de Ovulos")
polygon(d, col="red", border="blue")
polygon(e, col="green", border="blue")
# Filled Density Plot
d <- density(count$OVULOS)
plot(d, main="Número de Ovulos")
polygon(d, col="red", border="blue")
x <- count$OVULOS
h<-hist(x, breaks=10, col="red", xlab="Número de Ovulos",
main="Grafiquito")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
x <- count$ABORTOS
h<-hist(x, breaks=10, col="green", xlab="Número de abortos",
main="Grafiquito")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
lm(count$ABORTOS ~ count$OVULOS)
count.lm <-lm(count$ABORTOS ~ count$OVULOS)
summary(count.lm)
x <- count$OVULOS
h<-hist(x, breaks=10, col="red", xlab="Número de Ovulos",
main="Grafiquito")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
boxplot(count$OVULOS)
boxplot(count$ABORTOS)
boxplot(count$OVULOS,count$ABORTOS)
boxplot(count$ABORTOS)
count$OVULOS,
boxplot(count$OVULOS,count$ABORTOS)
install.packages(c("BiocManager", "brio", "broom", "cachem", "callr", "cli", "cpp11", "crayon", "data.table", "deldir", "desc", "devtools", "diffobj", "dplyr", "DT", "e1071", "emojifont", "expm", "fansi", "farver", "forcats", "gert", "GGally", "gh", "haven", "highr", "htmltools", "httpuv", "isoband", "jsonlite", "knitr", "later", "lifecycle", "maptools", "MatrixModels", "memoise", "mime", "parallelly", "patchwork", "pbkrtest", "phangorn", "pillar", "pkgbuild", "pkgload", "plotrix", "processx", "promises", "ps", "quantreg", "rappdirs", "RcppArmadillo", "remotes", "rgl", "rinat", "rio", "rlang", "rmarkdown", "segmented", "sf", "showtext", "SparseM", "spatstat.core", "spatstat.geom", "spdep", "sysfonts", "testthat", "tibble", "tidyr", "tinytex", "units", "usethis", "utf8", "vctrs", "viridis", "viridisLite", "waldo", "withr", "xfun", "XML"))
library(rinat)
#! /usr/bin/Rscript
## Guillermo Huerta Ramos
> sessionInfo()
#! /usr/bin/Rscript
## Guillermo Huerta Ramos
sessionInfo()
library(rinat)
image_folder <- "./images"
setwd("C:/Users/ghuer/Google Drive/Proyectos/Inat_Images")
dir.create(image_folder)
# read csv file with species names
obs <- read.csv("./species.csv", header = TRUE)
# Select genus and species columns to creat  species query
obs <- as.data.frame(paste(obs$Genus, obs$Species))
## optional functions if your database has any of the following:
# delete empty rows
obs <- obs[!(obs == " "), ]
# delete subspecies since they are not accepted as query
obs <- sub("^(\\S*\\s+\\S+).*", "\\1", obs)
# delete duplicated accessions
obs <- unique(obs)
#### get image urls and information
inat_data <- sapply(X = obs, FUN = function(x) {
message(sprintf("Fetching data for %s", x))
# trycatch function enables to continue the script even if a query doesn't have any hits
tryCatch(
{
# change "maxresults" argument to set the number of images to download
inat_out <- get_inat_obs(taxon_name = x)
# delay queries 2.5 seconds to avoid server overload error
Sys.sleep(2.5)
},
error = function(e) {
print(paste0("WARNING:couldn't find a match for ", x))
}
)
if (!exists("inat_out")) {
return(NULL)
} else {
return(inat_out)
}
}, simplify = FALSE)
omit_inat <- sapply(X = inat_data, FUN = is.null)
inat_data <- do.call(rbind, inat_data[!omit_inat])
species <- unique(inat_data$scientific_name)
final_inat_data <- sapply(X = species, FUN = function(x, inat_data, image_folder) {
newdata <- inat_data[inat_data$scientific_name == x, ]
# this step selects only "research" and open licenses if a species has more than 10 records
if (args[2] == "research") {
newdata <- newdata[newdata$quality_grade == "research", ]
}
if (args[3] == "wikicommons") {
newdata <- newdata[newdata$license != "", ]
}
infolder <- paste0(sub(" ", "_", x))
infolder <- file.path(image_folder, infolder)
dir.create(infolder, showWarnings = FALSE)
for (b in seq_len(nrow(newdata))) {
tryCatch(
{
user <- newdata[b, ]$user_login
cc <- newdata[b, ]$license
# "cc" images are no tagged, this next step includes "CC" on file names
if (cc == "") {
cc <- "CC"
}
url <- newdata[b, ]$image_url
id <- newdata[b, ]$id
file_name <- paste0(x, "_", user, "_", cc, "_", id, ".jpeg")
file_name <- file.path(infolder, file_name)
download.file(url, file_name, method = "curl")
},
error = function(e) {
print(paste0("WARNING: couldn't find the url"))
}
)
}
return(newdata)
}, inat_data = inat_data, image_folder = image_folder, simplify = FALSE)
# read csv file with species names
obs <- read.csv("./species.csv", header = TRUE)
# Select genus and species columns to creat  species query
obs <- as.data.frame(paste(obs$Genus, obs$Species))
## optional functions if your database has any of the following:
# delete empty rows
obs <- obs[!(obs == " "), ]
# delete subspecies since they are not accepted as query
obs <- sub("^(\\S*\\s+\\S+).*", "\\1", obs)
# delete duplicated accessions
obs <- unique(obs)
#### get image urls and information
inat_data <- sapply(X = obs, FUN = function(x) {
message(sprintf("Fetching data for %s", x))
# trycatch function enables to continue the script even if a query doesn't have any hits
tryCatch(
{
# change "maxresults" argument to set the number of images to download
inat_out <- get_inat_obs(taxon_name = x)
# delay queries 2.5 seconds to avoid server overload error
Sys.sleep(2.5)
},
error = function(e) {
print(paste0("WARNING:couldn't find a match for ", x))
}
)
if (!exists("inat_out")) {
return(NULL)
} else {
return(inat_out)
}
}, simplify = FALSE)
omit_inat <- sapply(X = inat_data, FUN = is.null)
inat_data <- do.call(rbind, inat_data[!omit_inat])
species <- unique(inat_data$scientific_name)
final_inat_data <- sapply(X = species, FUN = function(x, inat_data, image_folder) {
newdata <- inat_data[inat_data$scientific_name == x, ]
# # this step selects only "research" and open licenses if a species has more than 10 records
# if (args[2] == "research") {
#   newdata <- newdata[newdata$quality_grade == "research", ]
# }
#
# if (args[3] == "wikicommons") {
#   newdata <- newdata[newdata$license != "", ]
# }
infolder <- paste0(sub(" ", "_", x))
infolder <- file.path(image_folder, infolder)
dir.create(infolder, showWarnings = FALSE)
for (b in seq_len(nrow(newdata))) {
tryCatch(
{
user <- newdata[b, ]$user_login
cc <- newdata[b, ]$license
# "cc" images are no tagged, this next step includes "CC" on file names
if (cc == "") {
cc <- "CC"
}
url <- newdata[b, ]$image_url
id <- newdata[b, ]$id
file_name <- paste0(x, "_", user, "_", cc, "_", id, ".jpeg")
file_name <- file.path(infolder, file_name)
download.file(url, file_name, method = "curl")
},
error = function(e) {
print(paste0("WARNING: couldn't find the url"))
}
)
}
return(newdata)
}, inat_data = inat_data, image_folder = image_folder, simplify = FALSE)
final_inat_data <- do.call(rbind, final_inat_data)
# generate file with inaturalist observations information
write.table(final_inat_data, "./inat_data.csv", row.names = FALSE, sep = "\t")
